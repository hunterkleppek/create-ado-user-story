name: 'Create ADO Work Item using Service Principal'

on:
  # You can customize these triggers as needed
  workflow_dispatch:
    inputs:
      title:
        description: 'Title of the work item'
        required: true
        default: 'New Work Item'
      description:
        description: 'Description of the work item'
        required: false
        default: ''
      type:
        description: 'Type of the work item (e.g., User Story, Task, Bug)'
        required: true
        default: 'User Story'
      ado-organization:
        description: 'Azure DevOps organization'
        required: false
        default: 'SECURAInsurance'
  
  # You can also trigger this on issue creation
  issues:
    types: [opened, edited]

defaults:
  run:
    shell: pwsh

jobs:
  create-work-item:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
      
      - name: Checkout Token Generator
        uses: actions/checkout@v3
        with:
          repository: hunterkleppek/get-accesstoken-from-serviceprinciple-workflow
          path: get-token-repo
      
      - name: Get Azure DevOps Token
        id: get-token
        uses: ./get-token-repo
        with:
          client-id: ${{ secrets.ADO_SP_CLIENT_ID }}
          tenant-id: ${{ secrets.ADO_SP_TENANT_ID }}
          client-secret: ${{ secrets.ADO_SP_CLIENT_SECRET }}
          organization: ${{ github.event.inputs.ado-organization || 'SECURAInsurance' }}
      
      - name: Parse Description for Workflow Dispatch
        id: work_item_details
        if: github.event_name == 'workflow_dispatch'
        shell: pwsh
        run: |
          $outputs = ./PowerShell/parse-issue-details.ps1 `
            -IssueTitle "${{ github.event.inputs.title }}" `
            -IssueBody "${{ github.event.inputs.description }}"
          # Print each property and value for debug
          foreach ($key in $outputs.Keys) {
            Write-Host ("Parse Result: {0} = {1}" -f $key, $outputs[$key])
          }
      
      - name: Determine Title, Description and Type
        id: work-item-details
        if: github.event_name == 'issue'
        run: |
          ./PowerShell/parse-issue-details.ps1 `
            -IssueTitle "${{ github.event.issue.title }}" `
            -IssueBody "${{ github.event.issue.body }}"
      
      - name: Create ADO Work Item from Issue
        if: github.event_name == 'issue'
        run: |
          # Use the outputs directly from previous step
          $areaPath = "${{ steps.work-item-details.outputs.area }}"
          $parentId = "${{ steps.work-item-details.outputs.parent }}"
          $project = "${{ steps.work-item-details.outputs.project }}"
          if (-not $project) { $project = "Suite" }
          
          $result = ./PowerShell/create-ado-story.ps1 `
            -Organization "${{ github.event.inputs.ado-organization || 'SECURAInsurance' }}" `
            -Project $project `
            -BearerToken "${{ steps.get-token.outputs.token }}" `
            -IssueTitle "${{ steps.work-item-details.outputs.title }}" `
            -IssueBody "${{ steps.work-item-details.outputs.clean_description }}" `
            -WorkItemType "${{ steps.work-item-details.outputs.type }}" `
            -ParentId $parentId `
            -AreaPath $areaPath
          Write-Host "Script output: $result"
          $linkMatch = [regex]::Match($result, 'https?://\S+')
          if ($linkMatch.Success) {
            Write-Host "Work item link: $($linkMatch.Value)"
          }
      
      - name: Create ADO Work Item from Workflow
        if: github.event_name == 'workflow_dispatch'
        shell: pwsh
        run: |
          $title = "${{ github.event.inputs.title }}"
          if (-not $title) { throw 'Title is required and cannot be empty.' }

          $description = "${{ steps.work_item_details.outputs.clean_description }}"
          if ($null -eq $description -or $description -eq "") { $description = "No description provided." }

          $project = "${{ steps.work_item_details.outputs.project }}"
          if (-not $project) { $project = "Suite" }

          $areaPath = "${{ steps.work_item_details.outputs.area }}"
          # Remove any surrounding single or double quotes
          $areaPath = $areaPath.Trim("'", '"')
          # Replace double backslashes with single backslash
          $areaPath = $areaPath -replace '\\{2}', '\\'
          if (-not $areaPath) { $areaPath = "Suite\\Integrations - 1" }

          $parentId = "${{ steps.work_item_details.outputs.parent }}"

          Write-Host "Org: ${{ github.event.inputs.ado-organization }}"
          Write-Host "Project: $project"
          Write-Host "Token: ${{ steps.get-token.outputs.token }}"
          Write-Host "Title: $title"
          Write-Host "Description: $description"
          Write-Host "Type: ${{ github.event.inputs.type }}"
          Write-Host "Parent: $parentId"
          Write-Host "Area: $areaPath"

          $result = ./PowerShell/create-ado-story.ps1 `
            -Organization "${{ github.event.inputs.ado-organization || 'SECURAInsurance' }}" `
            -Project $project `
            -BearerToken "${{ steps.get-token.outputs.token }}" `
            -IssueTitle $title `
            -IssueBody $description `
            -WorkItemType "${{ github.event.inputs.type }}" `
            -ParentId $parentId `
            -AreaPath $areaPath
          Write-Host "Script output: $result"
          $linkMatch = [regex]::Match($result, 'https?://\S+')
          if ($linkMatch.Success) {
            Write-Host "Work item link: $($linkMatch.Value)"
          }


