name: 'Create ADO Work Item using Service Principal'

on:
  # You can customize these triggers as needed
  workflow_dispatch:
    inputs:
      title:
        description: 'Title of the work item'
        required: true
        default: 'New Work Item'
      description:
        description: 'Description of the work item'
        required: false
        default: ''
      type:
        description: 'Type of the work item (e.g., User Story, Task, Bug)'
        required: true
        default: 'User Story'
      ado-organization:
        description: 'Azure DevOps organization'
        required: false
        default: 'SECURAInsurance'
      ado-project:
        description: 'Azure DevOps project'
        required: true
      ado-tags:
        description: 'Comma-separated list of tags'
        required: false
        default: 'GitHub,AutoCreated'
  
  # You can also trigger this on issue creation
  issues:
    types: [opened, edited]

defaults:
  run:
    shell: pwsh

jobs:
  create-work-item:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
      
      - name: Checkout Token Generator
        uses: actions/checkout@v3
        with:
          repository: hunterkleppek/get-accesstoken-from-serviceprinciple-workflow
          path: get-token-repo
      
      - name: Get Azure DevOps Token
        id: get-token
        uses: ./get-token-repo
        with:
          client-id: ${{ secrets.ADO_SP_CLIENT_ID }}
          tenant-id: ${{ secrets.ADO_SP_TENANT_ID }}
          client-secret: ${{ secrets.ADO_SP_CLIENT_SECRET }}
          organization: ${{ github.event.inputs.ado-organization || 'SECURAInsurance' }}

      - name: Dump get-token outputs
        run: |
          echo "All outputs from get-token:"
          echo "${{ toJson(steps.get-token.outputs) }}"
      
      - name: Determine Title, Description and Type
        id: work-item-details
        if: github.event_name == 'issues'
        run: |
          ./PowerShell/parse-issue-details.ps1 `
            -IssueTitle "${{ github.event.issue.title }}" `
            -IssueBody "${{ github.event.issue.body }}" `
            -IssueLabels "${{ join(github.event.issue.labels.*.name, ',') }}"
      
      - name: Create ADO Work Item from Issue
        if: github.event_name == 'issues'
        run: |
          $tagsString = "GitHub,Issue#${{ github.event.issue.number }}"
          $issueLabels = "${{ join(github.event.issue.labels.*.name, ',') }}"
          if ($issueLabels) {
            $tagsString += ",$issueLabels"
          }
          
          # Extract area and parent from the issue description in work-item-details
          $areaPath = "${{ steps.work-item-details.outputs.area }}"
          $parentId = "${{ steps.work-item-details.outputs.parent }}"
          
          ./PowerShell/create-ado-story.ps1 `
            -Organization "${{ github.event.inputs.ado-organization || 'SECURAInsurance' }}" `
            -Project "${{ github.event.inputs.ado-project }}" `
            -BearerToken "${{ steps.get-token.outputs.ado_token }}" `
            -IssueTitle "${{ steps.work-item-details.outputs.title }}" `
            -IssueBody "${{ steps.work-item-details.outputs.description }}" `
            -WorkItemType "${{ steps.work-item-details.outputs.type }}" `
            -ParentId $parentId `
            -Tags @($tagsString.Split(',')) `
            -AreaPath $areaPath
      
      - name: Create ADO Work Item from Workflow
        if: github.event_name == 'workflow_dispatch'
        run: |
          $tagsArray = @()
          if ("${{ github.event.inputs.ado-tags }}") {
            $tagsArray = "${{ github.event.inputs.ado-tags }}".Split(',')
          }
          
          ./PowerShell/create-ado-story.ps1 `
            -Organization "${{ github.event.inputs.ado-organization }}" `
            -Project "${{ github.event.inputs.ado-project }}" `
            -BearerToken "${{ steps.get-token.outputs.ado_token }}" `
            -IssueTitle "${{ github.event.inputs.title }}" `
            -IssueBody "${{ github.event.inputs.description }}" `
            -WorkItemType "${{ github.event.inputs.type }}" `
            -Tags $tagsArray
